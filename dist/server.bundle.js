(()=>{"use strict";const e=require("http"),s=require("uuid");class t{static stringify(e){return JSON.stringify(e)}static parse(e){return JSON.parse(e)}}class r{constructor({name:e,age:t,hobbies:r}){if(!e)throw Error("name is required field");if(this.name=e,!t)throw Error("age is required field");if(this.age=t,!r)throw Error("hobbies is required field");this.hobbies=r,this.id=(0,s.v4)()}}const i={users:[{id:"8adcf0c8-de87-409a-a170-8050ff5dc4e3",username:"User 1",age:22,hobbies:["JavaScript"]},{id:"3398c305-a252-4595-b441-dc931e8c54bf",username:"User 2",age:44,hobbies:["TypeScript"]},{id:"37703441-ae7f-4b7a-89d0-fe590cb465d3",username:"User 3",age:33,hobbies:["Sleep"]}]};class n{getAll(){return i.users}getById(e){return i.users.find((s=>s.id===e))}create(e){i.users.push(e)}delete(e){i.users=i.users.filter((s=>s.id!==e))}update(e,s){return Object.assign(e,s)}}class a{constructor(){this.userService=new n}async DELETE(e,t){const[r]=e.params;return(0,s.validate)(r)?this.userService.getById(r)?(this.userService.delete(r),t.status(204).end()):t.status(404).end(`user with id:${r} doesn't exist`):t.status(400).end("userId is invalid (not uuid)")}async PUT(e,t){const[r]=e.params;if(!(0,s.validate)(r))return t.status(400).end("userId is invalid (not uuid)");const i=this.userService.getById(r);if(!i)return t.status(404).end(`user with id:${r} doesn't exist`);const n=await e.getBody(),a=this.userService.update(i,n);return t.status(200).end(a)}async POST(e,s){const i=await e.getBody();try{const e=new r(t.parse(i));this.userService.create(e),s.status(201).end(e)}catch({message:e}){s.status(400).end(e)}}async GET(e,t){const[r]=e.params;if(r){if(!(0,s.validate)(r))return t.status(400).end("userId is invalid (not uuid)");const e=this.userService.getById(r);return e?t.end(e):t.status(404).end(`user with id:${r} doesn't exist`)}const i=this.userService.getAll();return t.status(200).end(i)}}class u{constructor(){this.users=new a}async navigate(e,s,t){if(!this[e])return t.end("Route not found");const{method:r}=s;this[e][r](s,t)}}class d{constructor(e){this.request=e}get method(){return this.request.method}get params(){const[e,...s]=this.request.url.split("/").splice(1);return s}async getBody(){return new Promise(((e,s)=>{let r="";this.request.on("data",(e=>{r+=e.toString()})),this.request.on("end",(()=>{"application/x-www-form-urlencoded"===this.request.headers["content-type"]?e(new URLSearchParams(r)):e(t.parse(r))})),this.request.on("error",(e=>{s(e)}))}))}}class c{constructor(e){this.response=e}end(e){return this.response.end(t.stringify(e))}status(e){return this.response.statusCode=e,this}}require("dotenv"),(new class{constructor(){this.router=new u}init(){return(0,e.createServer)(((e,s)=>{const[t]=e.url.split("/").splice(1),r=new d(e),i=new c(s);this.router.navigate(t,r,i)}))}}).init().listen(process.env.PORT)})();